package cn.contract.ota.ctrip.ari;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.1.6
 * 2016-05-06T11:05:48.875+08:00
 * Generated source version: 3.1.6
 * 
 */
@WebServiceClient(name = "OTAReceiveService", 
                  wsdlLocation = "https://vendor.ctrip.com/Hotel/OTAReceive/OTAReceiveService.asmx?wsdl",
                  targetNamespace = "http://www.opentravel.org/OTA/2003/05") 
public class OTAReceiveService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.opentravel.org/OTA/2003/05", "OTAReceiveService");
    public final static QName OTAReceiveServiceSoap = new QName("http://www.opentravel.org/OTA/2003/05", "OTAReceiveServiceSoap");
    public final static QName OTAReceiveServiceSoap12 = new QName("http://www.opentravel.org/OTA/2003/05", "OTAReceiveServiceSoap12");
    static {
        URL url = null;
        try {
            url = new URL("https://vendor.ctrip.com/Hotel/OTAReceive/OTAReceiveService.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(OTAReceiveService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "https://vendor.ctrip.com/Hotel/OTAReceive/OTAReceiveService.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public OTAReceiveService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public OTAReceiveService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public OTAReceiveService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public OTAReceiveService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public OTAReceiveService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public OTAReceiveService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns OTAReceiveServiceSoap
     */
    @WebEndpoint(name = "OTAReceiveServiceSoap")
    public OTAReceiveServiceSoap getOTAReceiveServiceSoap() {
        return super.getPort(OTAReceiveServiceSoap, OTAReceiveServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OTAReceiveServiceSoap
     */
    @WebEndpoint(name = "OTAReceiveServiceSoap")
    public OTAReceiveServiceSoap getOTAReceiveServiceSoap(WebServiceFeature... features) {
        return super.getPort(OTAReceiveServiceSoap, OTAReceiveServiceSoap.class, features);
    }


    /**
     *
     * @return
     *     returns OTAReceiveServiceSoap
     */
    @WebEndpoint(name = "OTAReceiveServiceSoap12")
    public OTAReceiveServiceSoap getOTAReceiveServiceSoap12() {
        return super.getPort(OTAReceiveServiceSoap12, OTAReceiveServiceSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OTAReceiveServiceSoap
     */
    @WebEndpoint(name = "OTAReceiveServiceSoap12")
    public OTAReceiveServiceSoap getOTAReceiveServiceSoap12(WebServiceFeature... features) {
        return super.getPort(OTAReceiveServiceSoap12, OTAReceiveServiceSoap.class, features);
    }

}
